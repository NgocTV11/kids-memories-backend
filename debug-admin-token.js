#!/usr/bin/env node
/**
 * Debug script - Ki·ªÉm tra JWT token admin
 * Usage: node debug-admin-token.js <token>
 */

const jwt = require('jsonwebtoken');

const token = process.argv[2];

if (!token) {
  console.log('\n‚ùå Thi·∫øu token!');
  console.log('\nüìù C√°ch d√πng:');
  console.log('node debug-admin-token.js <your-jwt-token>');
  console.log('\nüí° L·∫•y token t·ª´:');
  console.log('1. Frontend localStorage: localStorage.getItem("accessToken")');
  console.log('2. Browser DevTools ‚Üí Application ‚Üí Local Storage');
  console.log('3. Network tab ‚Üí Headers ‚Üí Authorization: Bearer <token>\n');
  process.exit(1);
}

console.log('\nüîç Decoding JWT token...\n');

try {
  // Decode without verification (ch·ªâ ƒë·ªÉ xem payload)
  const decoded = jwt.decode(token, { complete: true });

  if (!decoded) {
    console.log('‚ùå Invalid token format\n');
    process.exit(1);
  }

  console.log('‚úÖ Token decoded successfully!\n');
  console.log('üìã Header:');
  console.log(JSON.stringify(decoded.header, null, 2));
  console.log('\nüì¶ Payload:');
  console.log(JSON.stringify(decoded.payload, null, 2));

  // Check admin role
  const payload = decoded.payload;
  const role = payload.role || payload.userRole || payload.user?.role;

  console.log('\nüîê Role Check:');
  console.log(`   Role field: ${role}`);
  
  if (role === 'admin') {
    console.log('   ‚úÖ User is ADMIN - Should have full access');
  } else if (role === 'user') {
    console.log('   ‚ö†Ô∏è  User is USER - Limited access');
  } else {
    console.log('   ‚ùå Unknown role or missing role field!');
  }

  // Check expiration
  if (payload.exp) {
    const expDate = new Date(payload.exp * 1000);
    const now = new Date();
    const isExpired = now > expDate;

    console.log('\n‚è∞ Expiration:');
    console.log(`   Expires at: ${expDate.toLocaleString()}`);
    console.log(`   Status: ${isExpired ? '‚ùå EXPIRED' : '‚úÖ Valid'}`);
    
    if (!isExpired) {
      const timeLeft = expDate - now;
      const hoursLeft = Math.floor(timeLeft / 1000 / 60 / 60);
      const minutesLeft = Math.floor((timeLeft / 1000 / 60) % 60);
      console.log(`   Time left: ${hoursLeft}h ${minutesLeft}m`);
    }
  }

  // Check user ID
  if (payload.sub || payload.userId || payload.id) {
    console.log('\nüë§ User Info:');
    console.log(`   User ID: ${payload.sub || payload.userId || payload.id}`);
    if (payload.email) console.log(`   Email: ${payload.email}`);
    if (payload.display_name) console.log(`   Name: ${payload.display_name}`);
  }

  console.log('\n');

} catch (error) {
  console.log('‚ùå Error decoding token:');
  console.log(error.message);
  console.log('\n');
  process.exit(1);
}
